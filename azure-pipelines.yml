name: Trunk-Based Development

trigger:
  branches:
    include: 
      - main
      - master
      - feature/*
      - release/*
      - production
      - sit
    exclude:
      - user/*

variables:
  poolVmImage: 'ubuntu-latest'
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

stages:
- stage: Build
  jobs:
  - job:
    pool:
      vmImage: $(poolVmImage)
    steps:
    - task: UseDotNet@2
      displayName: Get .NET 7 SDK
      inputs:
        packageType: sdk
        version: '7.x'
        installationPath: $(Agent.ToolsDirectory)/dotnet

    - task: DotNetCoreCLI@2
      displayName: Restore
      inputs:
        command: restore
        projects: $(solution)
        feedsToUse: 'select'
    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        command: build
        projects: $(solution)
        feedsToUse: 'select'    
    - task: DotNetCoreCLI@2
      name: UnitTests
      displayName: 'Run Unit Test'
      inputs:
        command: test
        projects: '**/*.Tests.Unit.csproj'
        arguments: '--configuration $(BuildConfiguration)'

    - task: DotNetCoreCLI@2
      name: AcceptanceTests
      displayName: 'Run Acceptance Test'
      inputs:
        command: test
        projects: '**/*.Tests.Acceptance.csproj'
        arguments: '--configuration $(BuildConfiguration)'

    - task: DotNetCoreCLI@2
      displayName: 'Publish'
      condition: not(contains(variables['build.sourceBranch'], 'refs/heads/feature/'))
      inputs:
        command: 'publish'
        projects: '$(solution)'
        arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
        publishWebProjects: true
        zipAfterPublish: false 

    - task: PublishBuildArtifacts@1
      displayName: 'Publish build artefacts'
      condition: not(contains(variables['build.sourceBranch'], 'refs/heads/feature/'))
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'  

- stage: DeployToDev
  displayName: 'Deploy to Dev environment'
  dependsOn: Build 
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  jobs:
    - deployment: DeployToDev
      displayName: 'Deploy to Dev'
      pool: 
        vmImage: $(poolVmImage)
      environment: Development
      strategy:
       runOnce:
         deploy:
           steps:
             - checkout: self
             - script: echo 'deploying to development environment - $(Build.SourceBranch)'

- stage: DeployToSIT
  displayName: 'Deploy to SIT environment'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/sit'))
  jobs:
    - deployment: DeployToSIT
      displayName: 'Deploy to SIT'
      pool: 
        vmImage: $(poolVmImage)
      environment: SIT
      strategy:
       runOnce:
         deploy:
           steps:
             - checkout: self
             - script: echo deploying to System-Integration-Test - $(Build.SourceBranch)

- stage: DeployToProd
  displayName: 'Deploy to Prod environment'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/production'))
  jobs:
    - deployment: DeployToProd
      displayName: 'Deploy to Prod'
      pool: 
        vmImage: $(poolVmImage)
      environment: Production
      strategy:
       runOnce:
         deploy:
           steps:
             - checkout: self
             - script: echo deploying to Production - $(Build.SourceBranch)